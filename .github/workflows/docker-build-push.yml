name: Docker

on:
  push:
    tags: [ "*" ]
  # pull_request:
  #   branches: [ master ]
    
env:
  # Use docker.io for Docker Hub if empty
  # REGISTRY: docker.io
  # IMAGE_NAME: serbenyuk
  SHA: ${{ github.event.pull_request.head.sha || github.event.after }}
  # Use `latest` as the tag to compare to if empty, assuming that it's already pushed
  COMPARE_TAG: latest

jobs:
  Build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
          
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2  

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PAT }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4.4.0
        with:
          images: serbenyuk/volunteer
          labels: |
            org.opencontainers.image.revision=${{ env.SHA }}
          tags: |
            type=edge,branch=$repo.default_branch
            type=semver,pattern=v{{version}}
            type=sha,prefix=,suffix=,format=short
      
      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v4.0.0
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  Migration-test-local:
    runs-on: ubuntu-latest
    name: Migration test local
    needs: Build
    services:
      db:
        image: postgres:14.9
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          # POSTGRES_HOST: 'localhost'
          # POSTGRES_PORT: 5432
        ports:
          - 5432:5432
        options:
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    # needs: build-dev
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - uses: actions/setup-python@v4
      with:
        python-version: '3.10' 
        cache: 'pip'
        cache-dependency-path: '**/requirements.txt'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Setup test database
      run: |
        export CI
        export DATABASE_URL=postgres://$POSTGRES_USER:$POSTGRES_PASSWORD@localhost:5432/$POSTGRES_DB
        export SECRET_KEY=test-secret-key
        export DEBUG=1
      env:
        POSTGRES_DB: postgres
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
        POSTGRES_HOST: 'localhost'
        POSTGRES_PORT: 5432



    - name: Run migrations
      run: |
        export DATABASE_URL=postgres://$POSTGRES_USER:$POSTGRES_PASSWORD@localhost:5432/$POSTGRES_DB
        export SECRET_KEY=test-secret-key
        export DEBUG=1
        export ALLOWED_HOSTS=localhost
        python manage.py makemigrations
        python manage.py migrate
        python manage.py migrate --run-syncdb
        python manage.py check

  Deploy-to-EC2:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      pull-requests: write
    needs:  Migration-test-local
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PAT }}
      - name: Set permissions for private key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.AWS_PRIVATE_KEY }}" | tr -d '\r' > ~/.ssh/id_rsa
          cat ~/.ssh/id_rsa
          chmod 700 ~/.ssh/id_rsa
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/id_rsa
          ssh-keyscan -H 'github.com' >> ~/.ssh/known_hosts

      - name: Update docker-compose
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@3.69.216.243 whoami
          scp -o StrictHostKeyChecking=no -r ./docker-compose.yaml ubuntu@3.69.216.243:/home/ubuntu/app
          ssh -o StrictHostKeyChecking=no ubuntu@3.69.216.243 'docker-compose -f /home/ubuntu/app/docker-compose.yaml up --build -d'
          docker images --format "table {{.Repository}}\t{{.Tag}}"

