name: Docker

on:
  push:
    tags: [ "*" ]
    branches:
      - 'master'
  pull_request:
    branches: [ "**" ]
    
env:
  # Use docker.io for Docker Hub if empty
  # REGISTRY: docker.io
  # IMAGE_NAME: serbenyuk
  SHA: ${{ github.event.pull_request.head.sha || github.event.after }}
  # Use `latest` as the tag to compare to if empty, assuming that it's already pushed
  COMPARE_TAG: latest

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
          
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2  

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PAT }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4.4.0
        with:
          images: serbenyuk/volunteer
          labels: |
            org.opencontainers.image.revision=${{ env.SHA }}
          tags: |
            type=edge,branch=$repo.default_branch
            type=semver,pattern=v{{version}}
            type=sha,prefix=,suffix=,format=short
      
      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v4.0.0
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Analyze for critical and high CVEs
        id: docker-scout-cves
        if: ${{ github.event_name != 'pull_request_target' }}
        uses: docker/scout-action@v0.18.1
        with:
          # command: cves
          # image: ${{ steps.meta.outputs.tags }}
          # sarif-file: results.sarif
          # summary: true
      
          command: cves,recommendations,compare
          to-latest: true
          ignore-base: true
          ignore-unchanged: true
          only-fixed: true

      # - name: Run Trivy vulnerability scanner
      #   uses: aquasecurity/trivy-action@master
      #   with:
      #     image-ref: ${{ steps.meta.outputs.tags }}
      #     format: 'table'
      #     ignore-unfixed: true
      #     vuln-type: 'os,library'
      #     severity: 'CRITICAL,HIGH,LOW,MEDIUM'